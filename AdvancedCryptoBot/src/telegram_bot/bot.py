import telegram # –û—Å–Ω–æ–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
from telegram.ext import Application, CommandHandler, ContextTypes # –î–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
import re # –î–ª—è Markdown —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
import asyncio # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TELEGRAM_BOT_TOKEN = "7606239476:AAHpx9jQ5r0UZqIshPWeuqagwAM5yyVC_1s" # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = "799734103" # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞

def escape_markdown_v2(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2.

    –°–∏–º–≤–æ–ª—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: _ * [ ] ( ) ~ ` > # + - = | { } . !
    –ö–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–º —Å–ª—ç—à–µ–º '\'.

    :param text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    :type text: str
    :return: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    :rtype: str
    """
    if not isinstance(text, str): # –ï—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏—à–ª–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, None –∏–ª–∏ —á–∏—Å–ª–æ)
        return '' # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å str(text)
        
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    # –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à \ —Ç–∞–∫–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω, –Ω–æ re.escape —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç
    escape_chars = r'_*[]()~`>#+\-=|{}.!'
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –∏–∑ —Å–ø–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª—è—è –ø–µ—Ä–µ–¥ –Ω–∏–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def format_signal_for_telegram(signal_data, coin_symbol):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ MarkdownV2 –¥–ª—è Telegram.

    :param signal_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞.
                        –ü—Ä–∏–º–µ—Ä: {'type': 'BUY', 'entry_price': 25000.00, 
                                 'stop_loss': 24500.00, 'take_profit': 26500.00,
                                 'confidence': 0.75, 'justification': 'AI prediction based on market trend.'}
    :type signal_data: dict
    :param coin_symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC-USDT').
    :type coin_symbol: str
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ MarkdownV2.
    :rtype: str
    """
    if not signal_data:
        return "–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
    esc_coin_symbol = escape_markdown_v2(coin_symbol.replace('-', '')) # #BTCUSDT - –±–µ–∑ —Ç–∏—Ä–µ –¥–ª—è —Ö–µ—à—Ç–µ–≥–∞
    signal_type_text = escape_markdown_v2(str(signal_data.get('type', 'N/A')))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    # –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ signal_data –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ
    price_precision = signal_data.get('price_precision', 2 if 'USD' in coin_symbol else 6) 
    
    entry_price_val = signal_data.get('entry_price')
    entry_price_str = f"{entry_price_val:.{price_precision}f}" if isinstance(entry_price_val, (int, float)) else 'N/A'
    esc_entry_price = escape_markdown_v2(entry_price_str)

    stop_loss_val = signal_data.get('stop_loss')
    stop_loss_str = f"{stop_loss_val:.{price_precision}f}" if isinstance(stop_loss_val, (int, float)) else 'N/A'
    esc_stop_loss = escape_markdown_v2(stop_loss_str)

    take_profit_val = signal_data.get('take_profit')
    take_profit_str = f"{take_profit_val:.{price_precision}f}" if isinstance(take_profit_val, (int, float)) else 'N/A'
    esc_take_profit = escape_markdown_v2(take_profit_str)

    confidence_val = signal_data.get('confidence', 0.0)
    confidence_percentage = f"{confidence_val * 100:.2f}%" # –ù–∞–ø—Ä–∏–º–µ—Ä, "75.00%"
    esc_confidence = escape_markdown_v2(confidence_percentage)
    
    justification_text = escape_markdown_v2(str(signal_data.get('justification', 'No specific justification provided.')))

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarkdownV2
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º f-string –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –Ω–æ –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ —É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
    message = f"""
*New Signal for #{esc_coin_symbol}* ü™ô
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Type:         *{signal_type_text}*
Entry Price:  `{esc_entry_price}` USD
Stop\-Loss:    `{esc_stop_loss}` USD
Take\-Profit:  `{esc_take_profit}` USD
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Confidence:   *{esc_confidence}*
Justification: _{justification_text}_
"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏–∑-–∑–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ f-string
    return '\n'.join([line.lstrip() for line in message.strip().split('\n')])


async def send_telegram_message(bot_token, chat_id, text, parse_mode='MarkdownV2'):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.

    :param bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞.
    :type bot_token: str
    :param chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    :type chat_id: str or int
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type text: str
    :param parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ('MarkdownV2' –∏–ª–∏ 'HTML').
    :type parse_mode: str
    """
    bot = telegram.Bot(token=bot_token)
    try:
        await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}.")
    except telegram.error.TelegramError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if hasattr(e, 'message'):
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ API: {e.message}")
        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
        # print(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –æ—à–∏–±–∫—É (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {text[:100]}")
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def start_command_handler(update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    chat_id = update.effective_chat.id
    welcome_message = "–ü—Ä–∏–≤–µ—Ç\\! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ\\-—Å–∏–≥–Ω–∞–ª–æ–≤\\. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ –º–µ—Ä–µ –∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\\."
    # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
    await send_telegram_message(TELEGRAM_BOT_TOKEN, chat_id, welcome_message, parse_mode='MarkdownV2')
    # –ò–ª–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
    # await update.message.reply_text(escape_markdown_v2("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª–æ–≤. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ –º–µ—Ä–µ –∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."), parse_mode='MarkdownV2')
    print(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")


async def main_bot_runner():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    –í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ polling –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, —Ñ—É–Ω–∫—Ü–∏—è —Å–ª—É–∂–∏—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    """
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    start_handler = CommandHandler('start', start_command_handler)
    application.add_handler(start_handler)
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–æ–±–∞–≤–ª–µ–Ω.")

    # –°–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π polling –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.
    # –û–Ω–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–ª—É—à–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.
    # print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    # await application.initialize()
    # print("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    # await application.start()
    # print("–ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    # await application.updater.start_polling()
    # print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    # try:
    #     while True:
    #         await asyncio.sleep(3600) # –î–µ—Ä–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∂–∏–≤—ã–º
    # except KeyboardInterrupt:
    #     print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    #     await application.updater.stop()
    #     await application.stop()
    #     print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (polling –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏).")
    # –î–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–Ω–µ—à–Ω–µ.


if __name__ == '__main__':
    # --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π ---
    
    # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ escape_markdown_v2
    test_text_md = "–≠—Ç–æ _—Ç–µ—Å—Ç_ —Å *–∂–∏—Ä–Ω—ã–º* –∏ [—Å—Å—ã–ª–∫–æ–π](http://example.com) –∏ `–∫–æ–¥–æ–º`."
    escaped_text_md = escape_markdown_v2(test_text_md)
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: {test_text_md}")
    print(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {escaped_text_md}") # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: –≠—Ç–æ \_—Ç–µ—Å—Ç\_ —Å \*–∂–∏—Ä–Ω—ã–º\* –∏ \[—Å—Å—ã–ª–∫–æ–π\]\(http://example\.com\) –∏ \`–∫–æ–¥–æ–º\`\.

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    sample_signal = {
        'type': 'BUY', 
        'entry_price': 25000.123456, 
        'stop_loss': 24500.654321, 
        'take_profit': 26500.0,
        'confidence': 0.8578, 
        'justification': '–°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω RSI > 70 –∏ MACD –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–æ–º. –¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –≤–∞–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.',
        'price_precision': 2 # –î–ª—è USD –ø–∞—Ä—ã
    }
    coin = "BTC-USD" 
    
    formatted_message = format_signal_for_telegram(sample_signal, coin)
    print(f"\n–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:\n{formatted_message}")

    # 3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ main_bot_runner
    async def run_demonstration():
        print("\n--- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ---")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_telegram_message(TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID, formatted_message)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ polling)
        await main_bot_runner()

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    print("\n–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ main_bot_runner)...")
    asyncio.run(run_demonstration())
    
    print("\n--- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è bot.py –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
